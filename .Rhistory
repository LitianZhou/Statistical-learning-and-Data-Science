summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(5,2))
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
}
for (i in 1:10){
poly.fit=lm(nox~poly(dis,i), data=Boston)
summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(2,5))
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
}
for (i in 1:10){
poly.fit=lm(nox~poly(dis,i), data=Boston)
summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
all.rss[i]=sum(poly.fit$residuals^2)
}
for (i in 1:10){
poly.fit=lm(nox~poly(dis,i), data=Boston)
summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
(all.rss[i]=sum(poly.fit$residuals^2))
}
all.rss = rep(NA, 10)
for (i in 1:10){
poly.fit=lm(nox~poly(dis,i), data=Boston)
summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
(all.rss[i]=sum(poly.fit$residuals^2))
}
all.rss = rep(NA, 10)
for (i in 1:10){
poly.fit=lm(nox~poly(dis,i), data=Boston)
summary(poly.fit)
dislims = range(dis)
dis.grid=seq(from=dislims[1], to=dislims[2])
preds=predict(poly.fit,newdata = list(dis=dis.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(dis,nox, xlim=dislims, col="darkgrey")
title("Degree Polynomial",outer=T)
lines(dis.grid, preds$fit, lwd="2",col="blue")
matlines(dis.grid, se.bands, lwd=1, col="blue",lty=3)
all.rss[i]=sum(poly.fit$residuals^2)
}
all.rss
library(boot)
library(boot)
all.delta=rep(0,10)
for(i in 1:10) {
glm.fit = glm(nox~poly(dis,i))
all.delta = cv.glm(Boston, glm.fit, K=10)$delta[2]
}
plot(1:10, all.delta, xlab="degree of poly", ylab = "cv_error", type = "l")
library(boot)
all.delta=rep(0,10)
for(i in 1:10) {
glm.fit = glm(nox~poly(dis,i))
all.delta[i] = cv.glm(Boston, glm.fit, K=10)$delta[2]
}
plot(1:10, all.delta, xlab="degree of poly", ylab = "cv_error", type = "l")
library(splines)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(age,df=6))
attr(bs(dis,df=4), "knots")
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(spline.fit,dis,data=Boston)
library(splines)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(age,df=6))
attr(bs(dis,df=4), "knots")
pred=predict(spline.fit, newdata = list(dis=dis.grid))
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(dis,pred$fit,data=Boston)
library(splines)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(age,df=6))
attr(bs(dis,df=4), "knots")
pred=predict(spline.fit, newdata = list(dis=dis.grid))
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(dis.grid,pred$fit,data=Boston)
library(splines)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(age,df=6))
attr(bs(dis,df=4), "knots")
pred=predict(spline.fit, newdata = list(dis=dis.grid))
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(dis.grid, pred,data=Boston)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(age,df=6))
attr(bs(dis,df=4), "knots")
library(splines)
spline.fit = lm(nox~bs(dis, df=4))
dim(bs(dis,df=4))
attr(bs(dis,df=4), "knots")
pred=predict(spline.fit, newdata = list(dis=dis.grid))
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(dis.grid, pred,data=Boston,col="red")
range(dis)
dim(bs(dis,df=4))
attr(bs(dis,df=4), "knots")
attr(bs(dis,df=6), "knots")
library(splines)
attr(bs(dis,df=6), "knots")
spline.fit = lm(nox~bs(dis, df=4, knots = c(2.1,3.2,5.2)))
pred=predict(spline.fit, newdata = list(dis=dis.grid))
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
lines(dis.grid, pred,col="red")
all.rss = rep(0,8)
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
for(i in 1:8) {
spline.fit = lm(nox~bs(dis, df=i))
pred=predict(spline.fit, newdata = list(dis=dis.grid))
lines(dis.grid, pred,col="red")
all.rss[i] = spline.fit$residuals^2
}
all.rss
all.rss = rep(0,5)
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
for(i in 3:7) {
spline.fit = lm(nox~bs(dis, df=i))
pred=predict(spline.fit, newdata = list(dis=dis.grid))
lines(dis.grid, pred,col="red")
all.rss[i-2] = spline.fit$residuals^2
}
all.rss
all.rss = rep(0,5)
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
for(i in 3:7) {
spline.fit = lm(nox~bs(dis, df=i))
pred=predict(spline.fit, newdata = list(dis=dis.grid))
lines(dis.grid, pred,col="red")
all.rss[i-2] = sum(spline.fit$residuals^2)
}
all.rss
all.rss = rep(0,10)
plot(dis, nox, xlab = "dis", ylab = "nox", col="darkgrey")
for(i in 3:12) {
spline.fit = lm(nox~bs(dis, df=i))
pred=predict(spline.fit, newdata = list(dis=dis.grid))
lines(dis.grid, pred,col="red")
all.rss[i-2] = sum(spline.fit$residuals^2)
}
all.rss
all.cv = rep(NA,10)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i-2] = cv.glm(spline.fit, K=5)
}
all.cv = rep(NA,10)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i-2] = cv.glm(spline.fit, K=5)$delta[2]
}
all.cv = rep(NA,10)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i-2] = cv.glm(spline.fit, K=10)$delta[2]
}
all.cv = rep(NA,10)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i-2] = cv.glm(spline.fit, K=3)$delta[2]
}
all.cv = rep(NA,10)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i-2] = cv.glm(spline.fit, Boston, K=10)$delta[2]
}
library(leaps)
attach(College)
train = sample(length(Outstate), length(Outstate)/2)
test = -train
College.train = College[train, ]
College.test = College[test, ]
reg.fit = regsubsets(Outstate ~ ., data = College.train, nvmax = 17, method = "forward")
reg.summary = summary(reg.fit)
par(mfrow = c(1, 3))
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp = min(reg.summary$cp)
std.cp = sd(reg.summary$cp)
abline(h = min.cp + 0.2 * std.cp, col = "red", lty = 2)
abline(h = min.cp - 0.2 * std.cp, col = "red", lty = 2)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic = min(reg.summary$bic)
std.bic = sd(reg.summary$bic)
abline(h = min.bic + 0.2 * std.bic, col = "red", lty = 2)
abline(h = min.bic - 0.2 * std.bic, col = "red", lty = 2)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2",
type = "l", ylim = c(0.4, 0.84))
max.adjr2 = max(reg.summary$adjr2)
std.adjr2 = sd(reg.summary$adjr2)
abline(h = max.adjr2 + 0.2 * std.adjr2, col = "red", lty = 2)
abline(h = max.adjr2 - 0.2 * std.adjr2, col = "red", lty = 2)
all.cv = rep(NA,12)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i))
all_cv[i] = cv.glm(spline.fit, Boston, K=10)$delta[2]
}
cv.error <- rep(0,7)
for (i in 4:10) {
glm.fit <- glm(nox~bs(dis, df=i), data=Boston)
cv.error[i-3] <- cv.glm(Boston, glm.fit, K=10)$delta[1]
}
cv.error
plot(4:10, cv.error, type="b")  # should use at least df=5
cv.error <- rep(0,7)
for (i in 4:10) {
glm.fit <- glm(nox~bs(dis, df=i), data=Boston)
cv.error[i-3] <- cv.glm(Boston, glm.fit, K=10)$delta[2]
}
cv.error
plot(4:10, cv.error, type="b")  # should use at least df=5
spline.fit = glm(nox~bs(dis, df=i,data=Boston))
all.cv = rep(NA,12)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i,data=Boston))
all_cv[i] = cv.glm(spline.fit, Boston, K=10)$delta[2]
}
all.cv = rep(NA,12)
for(i in 3:12) {
spline.fit = glm(nox~bs(dis, df=i),data=Boston)
all_cv[i] = cv.glm(spline.fit, Boston, K=10)$delta[2]
}
cv.error <- rep(0,7)
for (i in 4:10) {
glm.fit <- glm(nox~bs(dis, df=i), data=Boston)
cv.error[i-3] <- cv.glm(Boston, glm.fit, K=10)$delta[1]
}
cv.error
plot(4:10, cv.error, type="b")  # should use at least df=5
cv.error <- rep(0,7)
for (i in 4:10) {
glm.fit <- glm(nox~bs(dis, df=i), data=Boston)
cv.error[i-3] <- cv.glm(Boston, glm.fit, K=10)$delta[2]
}
cv.error
plot(4:10, cv.error, type="b")  # should use at least df=5
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + s(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "blue")
gam.pred = predict(gam.fit, College.test)
gam.err = mean((College.test$Outstate - gam.pred)^2)
gam.err
gam.tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
test.rss = 1 - gam.err/gam.tss
test.rss
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + s(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "blue")
gam.pred = predict(gam.fit, College.test)
gam.err = mean((College.test$Outstate - gam.pred)^2)
gam.err
gam.tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
test.rss = 1 - gam.err/gam.tss
test.rss
library(leaps)
attach(College)
train = sample(length(Outstate), length(Outstate)/2)
test = -train
College.train = College[train, ]
College.test = College[test, ]
reg.fit = regsubsets(Outstate ~ ., data = College.train, nvmax = 17, method = "forward")
reg.summary = summary(reg.fit)
par(mfrow = c(1, 3))
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp = min(reg.summary$cp)
std.cp = sd(reg.summary$cp)
abline(h = min.cp + 0.2 * std.cp, col = "red", lty = 2)
abline(h = min.cp - 0.2 * std.cp, col = "red", lty = 2)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic = min(reg.summary$bic)
std.bic = sd(reg.summary$bic)
abline(h = min.bic + 0.2 * std.bic, col = "red", lty = 2)
abline(h = min.bic - 0.2 * std.bic, col = "red", lty = 2)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2",
type = "l", ylim = c(0.4, 0.84))
max.adjr2 = max(reg.summary$adjr2)
std.adjr2 = sd(reg.summary$adjr2)
abline(h = max.adjr2 + 0.2 * std.adjr2, col = "red", lty = 2)
abline(h = max.adjr2 - 0.2 * std.adjr2, col = "red", lty = 2)
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + s(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "blue")
gam.pred = predict(gam.fit, College.test)
gam.err = mean((College.test$Outstate - gam.pred)^2)
gam.err
gam.tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
test.rss = 1 - gam.err/gam.tss
test.rss
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + ns(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "blue")
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + s(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "blue")
gam.fit = gam(Outstate ~ Private + s(Room.Board, df = 2) + s(PhD, df = 2) +
s(perc.alumni, df = 2) + s(Expend, df = 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2, 3))
plot(gam.fit, se = T, col = "red")
library(leaps)
attach(College)
train = sample(length(Outstate), length(Outstate)/2)
test = -train
College.train = College[train, ]
College.test = College[test, ]
reg.fit = regsubsets(Outstate ~ ., data = College.train, nvmax = 17, method = "forward")
reg.summary = summary(reg.fit)
par(mfrow = c(1, 3))
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp = min(reg.summary$cp)
std.cp = sd(reg.summary$cp)
abline(h = min.cp + 0.2 * std.cp, col = "red", lty = 2)
abline(h = min.cp - 0.2 * std.cp, col = "red", lty = 2)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic = min(reg.summary$bic)
std.bic = sd(reg.summary$bic)
abline(h = min.bic + 0.2 * std.bic, col = "red", lty = 2)
abline(h = min.bic - 0.2 * std.bic, col = "red", lty = 2)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2",
type = "l", ylim = c(0.4, 0.84))
max.adjr2 = max(reg.summary$adjr2)
std.adjr2 = sd(reg.summary$adjr2)
abline(h = max.adjr2 + 0.2 * std.adjr2, col = "red", lty = 2)
abline(h = max.adjr2 - 0.2 * std.adjr2, col = "red", lty = 2)
library(leaps)
attach(College)
train = sample(length(Outstate), length(Outstate)/2)
test = -train
College.train = College[train, ]
College.test = College[test, ]
reg.fit = regsubsets(Outstate ~ ., data = College.train, nvmax = 17, method = "forward")
(reg.summary = summary(reg.fit))
par(mfrow = c(1, 3))
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
min.cp = min(reg.summary$cp)
std.cp = sd(reg.summary$cp)
abline(h = min.cp + 0.2 * std.cp, col = "red", lty = 2)
abline(h = min.cp - 0.2 * std.cp, col = "red", lty = 2)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
min.bic = min(reg.summary$bic)
std.bic = sd(reg.summary$bic)
abline(h = min.bic + 0.2 * std.bic, col = "red", lty = 2)
abline(h = min.bic - 0.2 * std.bic, col = "red", lty = 2)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2",
type = "l", ylim = c(0.4, 0.84))
max.adjr2 = max(reg.summary$adjr2)
std.adjr2 = sd(reg.summary$adjr2)
abline(h = max.adjr2 + 0.2 * std.adjr2, col = "red", lty = 2)
abline(h = max.adjr2 - 0.2 * std.adjr2, col = "red", lty = 2)
summary(gam.fit)
knitr::opts_chunk$set(echo = TRUE)
life=read.csv("Life Expectancy Data.csv")
life=na.omit(life)
life=life[2:22]
developed=as.numeric(life$Status=="Developed")
life$Status=developed
train.size = dim(life)[1]/2
set.seed(1361)
train = sample(1:dim(life)[1], train.size)
test = -train
life.train=life[train,]
life.test=life[test,]
library(glmnet)
lm.life = lm(Life.expectancy~., data=life.train)
lm.pred = predict(lm.life, life.test)
lse.mse=mean((life.test$Life.expectancy - lm.pred)^2)
print("The MSE for basic least square linear model is: ")
print(lse.mse)
library(leaps)
library(MASS)
lm.min=lm(Life.expectancy~1,data=life.train)
lm.for=step(lm.min,direction = 'forward',scope = formula(lm.life))
lm.pred=predict(lm.for,life.test)
for.mse=mean((life.test$Life.expectancy - lm.pred)^2)
print("The MSE for forward selection model is: ")
print(for.mse)
library(leaps)
library(MASS)
lm.back=stepAIC(lm.life, direction="backward")
lm.pred=predict(lm.back,life.test)
back.mse=mean((life.test$Life.expectancy - lm.pred)^2)
print("The MSE for forward selection model is: ")
print(back.mse)
library(glmnet)
train.mat = model.matrix(Life.expectancy~., data=life.train)
test.mat = model.matrix(Life.expectancy~., data=life.test)
grid = 10 ^ seq(5, -5, length=100)
mod.ridge = cv.glmnet(train.mat, life.train$Life.expectancy, alpha=0, lambda=grid, thresh=1e-12)
ridge.lambda = mod.ridge$lambda.min
ridge.pred = predict(mod.ridge, newx=test.mat, s=lambda.best)
mod.lasso = cv.glmnet(train.mat, life.train$Life.expectancy, alpha=1, lambda=grid, thresh=1e-12)
lambda.best = mod.lasso$lambda.min
lasso.pred = predict(mod.lasso, newx=test.mat, s=lambda.best)
lasso.mse=mean((life.test$Life.expectancy - lasso.pred)^2)
print("The MSE for LASSO regression model is: ")
print(lasso.mse)
mod.lasso = glmnet(model.matrix(Life.expectancy~., data=life), life$Life.expectancy, alpha=1)
lasso.coef=predict(mod.lasso, s=lambda.best, type="coefficients")
print("The total number of non-zero coefficients in the LASSO regression")
length(lasso.coef!=0)
library(pls)
pcr.fit = pcr(Life.expectancy~., data=life.train, scale=T, validation="CV")
validationplot(pcr.fit, val.type="MSEP")
lasso.pred
summary(lasso)
summary(mod.lasso)
summary(mod.lasso$a0)
summary(mod.lasso$beta)
summary(mod.lasso$lambda)
summary(mod.lasso$dev.ratio)
?mod.lasso
?cv.glmbet
?cv.glmnet
lasso.coef
poly.fit=lm(Life.expectancy~poly(percentage.expenditure,3))
life=read.csv("Life Expectancy Data.csv")
life=read.csv("Life Expectancy Data.csv")
life=na.omit(life)
life=life[2:22]
attach(life)
poly.fit=lm(Life.expectancy~poly(percentage.expenditure,3))
poly.fit=lm(Life.expectancy~poly(percentage.expenditure,3))
summary(poly.fit)
percentage.expenditurelims = range(percentage.expenditure)
percentage.expenditure.grid=seq(from=percentage.expenditurelims[1], to=percentage.expenditurelims[2])
preds=predict(poly.fit,newdata = list(percentage.expenditure=percentage.expenditure.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(percentage.expenditure,Life.expectancy, xlim=percentage.expenditurelims, col="darkgrey")
title("Degree-3 Polynomial",outer=T)
lines(percentage.expenditure.grid, preds$fit, lwd="2",col="blue")
matlines(percentage.expenditure.grid, se.bands, lwd=1, col="blue",lty=3)
poly.fit=lm(Life.expectancy~poly(percentage.expenditure,2))
summary(poly.fit)
percentage.expenditurelims = range(percentage.expenditure)
percentage.expenditure.grid=seq(from=percentage.expenditurelims[1], to=percentage.expenditurelims[2])
preds=predict(poly.fit,newdata = list(percentage.expenditure=percentage.expenditure.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
plot(percentage.expenditure,Life.expectancy, xlim=percentage.expenditurelims, col="darkgrey")
title("Degree-3 Polynomial",outer=T)
lines(percentage.expenditure.grid, preds$fit, lwd="2",col="blue")
matlines(percentage.expenditure.grid, se.bands, lwd=1, col="blue",lty=3)
gam4.fit=gam(Life.expectancy~Schooling+s(BMI)+s(Adult.Mortality)+s(HIV.AIDS))
par(mfrow=c(2,2))
plot.Gam(gam4.fit, se=TRUE, col="blue")
title("GAM: linear + smoothing spline fit", outer=TRUE)
gam1.fit=gam(Life.expectancy~Schooling)
gam2.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality))
gam3.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality)+s(BMI))
anova(gam1.fit, gam2.fit, gam3.fit, gam4.fit)
gam4.fit=gam(Life.expectancy~Schooling+s(BMI, df=3)+s(Adult.Mortality)+s(HIV.AIDS))
par(mfrow=c(2,2))
plot.Gam(gam4.fit, se=TRUE, col="blue")
title("GAM: linear + smoothing spline fit", outer=TRUE)
gam1.fit=gam(Life.expectancy~Schooling)
gam2.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality))
gam3.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality)+s(BMI))
anova(gam1.fit, gam2.fit, gam3.fit, gam4.fit)
gam4.fit=gam(Life.expectancy~Schooling+s(BMI, df=4)+s(Adult.Mortality)+s(HIV.AIDS))
par(mfrow=c(2,2))
plot.Gam(gam4.fit, se=TRUE, col="blue")
title("GAM: linear + smoothing spline fit", outer=TRUE)
gam1.fit=gam(Life.expectancy~Schooling)
gam2.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality))
gam3.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality)+s(BMI))
anova(gam1.fit, gam2.fit, gam3.fit, gam4.fit)
gam4.fit=gam(Life.expectancy~Schooling+s(BMI)+s(Adult.Mortality)+s(HIV.AIDS))
par(mfrow=c(2,2))
plot.Gam(gam4.fit, se=TRUE, col="blue")
title("GAM: linear + smoothing spline fit", outer=TRUE)
gam1.fit=gam(Life.expectancy~Schooling)
gam2.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality))
gam3.fit=gam(Life.expectancy~Schooling+s(Adult.Mortality)+s(BMI))
anova(gam1.fit, gam2.fit, gam3.fit, gam4.fit)
